---
import { Icon } from 'astro-icon/components';
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';
// import homeVideo from '~/assets/homeVideo.mp4';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-12 md:py-20">
      <div class="text-center pb-10 md:pb-16 max-w-5xl mx-auto">
        {
          tagline && (
            <p
              class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {
            subtitle && (
              <p
                class="text-xl text-muted mb-6 dark:text-slate-300 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
                set:html={subtitle}
              />
            )
          }
          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
      <div
        class="intersect-once intercept-no-queue intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
      >
      <div style="position: relative;">
        <video muted onclick="this.play();document.getElementById('videoPlayIcon').style.display='none';" poster="/videoBeforePlayImage.png" id="extVideo" style="height: 700px;" class="h-full rounded-md w-full"/>
        <!-- <Icon id="videoPlayIcon" onclick="document.getElementById('extVideo').play();this.style.display='none'" name="tabler:player-play" class="w-10 h-10 inline-block -mt-0.5 dark:text-gray-400 cursor-pointer" style="position: absolute;left: 47%;top: 46%;"/> -->
      </div>
      <script>
        // 初始化
        window.addEventListener("DOMContentLoaded",()=>{
          const extVideo = document.getElementById("extVideo")! as HTMLVideoElement;
          const videoPlayIcon = document.getElementById("videoPlayIcon")!;
          //屏幕比例判断
          if (window.innerWidth<window.innerHeight) {
            //移动端
            extVideo.style.height = "300px";
            
          } else {
            extVideo.style.height = "750px";
          }
          (async ()=>{
            //未来更新视频后改这个数值 自动刷新
            const videoVersion = 1;
            if (!window.caches) {
              //不支持缓存 直接设置src
              extVideo.src = "/homeVideo.mp4";
              return
            }
            const localVideoVersion= parseInt(localStorage.getItem("videoVersion")??"0");
            const cache = await caches.open("video");
            if (videoVersion !== localVideoVersion) {
              console.log("video update!");
              await cache.delete("/homeVideo.mp4")
            }
            if(!await cache.match("/homeVideo.mp4")){
              await cache.add("/homeVideo.mp4");
              localStorage.setItem("videoVersion", videoVersion.toString());
            }
            const videoCache = await cache.match("/homeVideo.mp4");
            extVideo.src=URL.createObjectURL(await videoCache!.blob());
            extVideo.play();
            console.log("Load from cache");
          })();
        });
        //应该有用
        window.addEventListener("resize",()=>{
          const extVideo = document.getElementById("extVideo");
          if (!extVideo) return;
          if (window.innerWidth<window.innerHeight) {
            extVideo.style.height = "300px";
          
          } else {
            extVideo.style.height = "750px";
          }
        })
      </script>
        <!-- {
          image && (
            <div class="relative m-auto max-w-5xl">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="mx-auto rounded-md w-full"
                  widths={[400, 768, 1024, 2040]}
                  sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                  loading="eager"
                  width={1024}
                  height={576}
                  {...image}
                />
              )}
            </div>
          )
        } -->
      </div>
    </div>
  </div>
</section>
